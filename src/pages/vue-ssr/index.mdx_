---
title: 'Understanding Server-Side Rendering in Vue.js'
description: ''
date: '2020-04-07T13:15:37.938Z'
---

Recently I had to deal with SSR in Vue.js. I barely knew about it. I spent lots of time, and this is my brain dump.

I'm not going to start with how to setup a vue project, but will use a GitHub repository [vue-cli-ssr](https://github.com/1isten/vue-cli-ssr) as a base. At the time of writing this, the latest commit on the repository is `378e2d8`.

## High-level overview

First, clone the repository, and build it:

```bash
yarn && yarn build
```

It will create the following files for SSR:

- `public/vue-ssr-client-manifest.json`
- `public/vue-ssr-server-bundle.json`

Now, run the following to execute `app.js`:

```bash
yarn start
```

`app.js` is just a simple express app.

```js
const fs = require('fs');
const { createBundleRenderer } = require('vue-server-renderer');
const serverBundle = require('./public/vue-ssr-server-bundle.json');
const template = fs.readFileSync('./src/index.template.html', 'utf-8');
const clientManifest = require('./public/vue-ssr-client-manifest.json');

const renderer = createBundleRenderer(serverBundle, {
  runInNewContext: false, // recommended
  template, // (optional) page template
  clientManifest, // (optional) client build manifest
});

app.get('*', (req, res) => {
  const context = { url: req.url };
  renderer.renderToString(context, (err, html) => {
    if (err) {
      // ...
    } else {
      res.end(html);
    }
  });
});

app.listen(3000);
```

- `createBundleRenderer` from `vue-server-renderer` creates a renderer using the output from `yarn build`.
- `renderer.renderToString()` will render your Vue.js components and render them to HTML string.
- `res.end(html)` sends the HTML to the client.
- `app.get('*', ...)` is to work with any urls. It put the url in the `context` and `renderer` will take it into account.

If you open http://localhost:3000/about, right-click, view source, then you will see the body contains this:

```html
<div id="app" data-server-rendered="true">
  <div id="nav">
    ...
  </div>
  <div class="about">
    <h1>This is an about page</h1>
  </div>
</div>
```

- `data-server-rendered="true"` shows it's rendered by `vue-server-renderer`.
- `<div class="about">...` shows `About.vue` is rendered.

## Entries

There are two entry files:

- `src/entry-client.js`
- `src/entry-server.js`

### entry-server.js

`entry-server.js` exports a function which takes `context` and returns a promise which resolves a Vue.js app.

It looks like this:

```js
export default (context) => {
  return new Promise((resolve, reject) => {
    const { app, router, store } = createApp();

    router.push(context.url);

    router.onReady(() => {
      context.rendered = async () => {
        context.state = store.state;
      };

      // no matched routes, reject with 404
      const matchedComponents = router.getMatchedComponents();
      if (matchedComponents.length === 0) {
        return reject({ code: 404 });
      }

      resolve(app);
    }, reject);
  });
};
```

`createApp()` returns `app`, `router` and `store`. And the `app` is a `Vue` instance which will render your `App.vue` component.

So, in this `entry-server.js`, we push the current url to `router`. When `router.onReady()` is called, now it's time to resolve the `app` component. At this point, this `app` hasn't been rendered. For example, `app.$children` is `[]`.

We will talk about `context.rendered` part later.

### entry-client.js

It looks like this:

```js
import { createApp } from './main';

const { app, router, store } = createApp();

if (window.__INITIAL_STATE__) {
  // We initialize the store state with the data injected from the server
  store.replaceState(window.__INITIAL_STATE__);
}

router.onReady(() => {
  app.$mount('#app');
});
```

It creates an app and mount it. Nothing special. This file becomes `main.xxxxxxxx.js` file and is loaded on the browser.

We will talk about `store.replaceState()` part later.

## renderer

Let's go deeper. At `app.js`, it runs

```js
renderer.renderToString(context, (err, html) => {
  if (err) {
    // ...
  } else {
    res.end(html);
  }
});
```

What does `renderToString` exactly do?
